;;
;; srfi-48 format test for Gauche only
;;

(add-load-path "." :relative)
(use gauche.test)

(include "srfi-48")

(test-start "srfi-48 format")

(define-syntax expr-test
  (syntax-rules ()
    ((_ txt ans expr)
     (test* (string-append txt (if (equal? txt "") "" " ")
                           ": " (format "~s" 'expr)) ans expr))
    ((_ txt ans expr chk)
     (test* (string-append txt (if (equal? txt "") "" " ")
                           ": " (format "~s" 'expr)) ans expr chk))))

(define (nearly=? a b)
  (let ((a1 (x->number a)) (b1 (x->number b)))
    ;(test-log "result = ~s, num-e = ~s, num-r = ~s" b a1 b1)
    (< (abs (- a1 b1)) 1.0e-10)))

(define pi 3.141592653589793)

(test-section "examples")
(expr-test "" "    0.33"   (format "~8,2F" 1/3))
(expr-test "" "    32"     (format "~6F" 32))
(expr-test "" "   32.00"   (format "~8,2F" 32))
(expr-test "" "4321.00"    (format "~1,2F" 4321))
(expr-test "" "0.00+1.97i" (format "~1,2F" (sqrt -3.9)))
(expr-test "" "3200000.0"  (format "~8F" 32e5))
;(expr-test "" "   3.2e6"   (format "~8F" 32e5))
(expr-test "" <string>     (format "~h") (lambda (e r) (is-a? r e)))
(expr-test "" "Hello, World!" (format "Hello, ~a" "World!"))
(expr-test "" "Error, list is too short: (one \"two\" 3)" (format "Error, list is too short: ~s" '(one "two" 3)))
(expr-test "" "test me"    (format "test me"))
(expr-test "" "this is a \"test\"" (format "~a ~s ~a ~s" 'this 'is "a" "test"))
(expr-test "" (undefined)  (format #t "#d~d #x~x #o~o #b~b~%" 32 32 32 32))
(expr-test "" "a new test" (format "~a ~? ~a" 'a "~s" '(new) 'test))
(expr-test "" "\n1\n2\n3\n" (format #f "~&1~&~&2~&~&~&3~%"))
(expr-test "" "3  2 2  3 \n" (format #f "~a ~? ~a ~%" 3 " ~s ~s " '(2 2) 3))
;; incorrect mutation of literal list in example
;(expr-test "" "#1=(a b c . #1#)" (format "~w" (let ( (c '(a b c)) ) (set-cdr! (cddr c) c) c)))
(expr-test "" "   32.00"   (format "~8,2F" 32))
(expr-test "" "0.000+1.949i" (format "~8,3F" (sqrt -3.8)))
;(expr-test "" " 3.45e11"   (format "~8,2F" 3.4567e11))
(expr-test "" " 3.46e11"   (format "~8,2F" 3.4567e11))
(expr-test "" " 0.333"     (format "~6,3F" 1/3))
(expr-test "" "  12"       (format "~4F" 12))
(expr-test "" " 123.346"   (format "~8,3F" 123.3456))
(expr-test "" "123.346"    (format "~6,3F" 123.3456))
(expr-test "" "123.346"    (format "~2,3F" 123.3456))
(expr-test "" "     foo"   (format "~8,3F" "foo"))
(expr-test "" "\n"         (format "~a~a~&" (list->string (list #\newline)) ""))

(test-section "~F normal")
(expr-test "" "0"          (format "~F"    0))
(expr-test "" "1"          (format "~F"    1))
(expr-test "" "123"        (format "~F"  123))
(expr-test "" "0.456"      (format "~F"    0.456))
(expr-test "" "123.456"    (format "~F"  123.456))
(expr-test "" "-1"         (format "~F"   -1))
(expr-test "" "-123"       (format "~F" -123))
(expr-test "" "-0.456"     (format "~F"   -0.456))
(expr-test "" "-123.456"   (format "~F" -123.456))

(test-section "~F width")
(expr-test "" "123"        (format "~0F"  123))
(expr-test "" "123"        (format "~1F"  123))
(expr-test "" "123"        (format "~2F"  123))
(expr-test "" "123"        (format "~3F"  123))
(expr-test "" " 123"       (format "~4F"  123))
(expr-test "" "  123"      (format "~5F"  123))
(expr-test "" "-123"       (format "~3F" -123))
(expr-test "" "-123"       (format "~4F" -123))
(expr-test "" " -123"      (format "~5F" -123))
(expr-test "" "  -123"     (format "~6F" -123))

(test-section "~F digits")
(expr-test "" "123."       (format "~1,0F"   123))
(expr-test "" "123.0"      (format "~1,1F"   123))
(expr-test "" "123.00"     (format "~1,2F"   123))
(expr-test "" "0.12"       (format "~1,2F"   0.123))
(expr-test "" "0.123"      (format "~1,3F"   0.123))
(expr-test "" "0.1230"     (format "~1,4F"   0.123))
(expr-test "" "-123."      (format "~1,0F"  -123))
(expr-test "" "-123.0"     (format "~1,1F"  -123))
(expr-test "" "-123.00"    (format "~1,2F"  -123))
(expr-test "" "-0.12"      (format "~1,2F"  -0.123))
(expr-test "" "-0.123"     (format "~1,3F"  -0.123))
(expr-test "" "-0.1230"    (format "~1,4F"  -0.123))

(test-section "~F rounding (banker's rounding)")
(expr-test "" "123."       (format "~1,0F"   123.456))
(expr-test "" "123.5"      (format "~1,1F"   123.456))
(expr-test "" "123.46"     (format "~1,2F"   123.456))
(expr-test "" "-123."      (format "~1,0F"  -123.456))
(expr-test "" "-123.5"     (format "~1,1F"  -123.456))
(expr-test "" "-123.46"    (format "~1,2F"  -123.456))
(expr-test "" "123.0"      (format "~1,1F"   123.05))
(expr-test "" "123.2"      (format "~1,1F"   123.15))
(expr-test "" "124.0"      (format "~1,1F"   123.95))
(expr-test "" "-123.0"     (format "~1,1F"  -123.05))
(expr-test "" "-123.2"     (format "~1,1F"  -123.15))
(expr-test "" "-124.0"     (format "~1,1F"  -123.95))
(expr-test "" "1000.00"    (format "~1,2F"   999.995))
(expr-test "" "-1000.00"   (format "~1,2F"  -999.995))

(test-section "~F misc")
(expr-test "" "+inf.0"     (format "~F" (/.  1 0)))
(expr-test "" "-inf.0"     (format "~F" (/. -1 0)))
(expr-test "" "+nan.0"     (format "~F" (/.  0 0)))
(expr-test "" "0.0"        (format "~F" (/.  0 +inf.0)))
(expr-test "" "-0.0"       (format "~F" (/.  0 -inf.0)))
(expr-test "" "31.41592653589793" (format "~F" (* pi 10)))
(expr-test "" "0.33333"    (format "~1,5F"  1/3))
(expr-test "" "-0.33333"   (format "~1,5F" -1/3))
(expr-test "" "0.142857142857" (format "~1,12F"  1/7))
(expr-test "" "299999999.999999999" (format "~F" 299999999999999999/1000000000) nearly=?)
(expr-test "" "1.797693e308"  (format "~F"  1.797693e308))
(expr-test "" "-1.797693e308" (format "~F" -1.797693e308))
(expr-test "" "2.225074e-308" (format "~F"  2.225074e-308))
(expr-test "" "5.02"       (format "~1,2F" 5.015))
(expr-test "" "6.00"       (format "~1,2F" 5.999))
(expr-test "" "123."       (format "~1,0F" 123.00))
(expr-test "" "0.1"        (format "~F" .1))
(expr-test "" "1"          (format "~1f" 1))

(test-section "~F error")
(expr-test "" (test-error) (format "~-1F" 1))
(expr-test "" (test-error) (format "~1,-1F" 1))

(test-section "from mailing list 2004-05-27")
(expr-test "" "1.230e20"   (format "~0,3F" 1.23e20))
(expr-test "" "1.230e-20"  (format "~0,3F" 1.23e-20))

(test-section "from mailing list 2004-06-11")
(expr-test "" "3.457e15"   (format "~8,3F" 3.4569e15))
(expr-test "" "   3.457"   (format "~8,3F" 3.4569))
(expr-test "" " 3.46e15"   (format "~8,2F" 3.456e15))
(expr-test "" "    3.46"   (format "~8,2F" 3.456))

(test-section "from mailing list 2005-06-03")
(expr-test "" "    -3.e-4" (format "~10,0F" -3e-4))
(expr-test "" "   -3.0e-4" (format "~10,1F" -3e-4))
(expr-test "" "  -3.00e-4" (format "~10,2F" -3e-4))
(expr-test "" " -3.000e-4" (format "~10,3F" -3e-4))
(expr-test "" "-3.0000e-4" (format "~10,4F" -3e-4))
(expr-test "" " 3.0000e-5" (format "~10,4F"  3e-5))

(test-section "from mailing list 2005-06-07")
(expr-test "" "     1.020" (format "~10,3F" 1.02))
(expr-test "" "     1.025" (format "~10,3F" 1.025))
(expr-test "" "     1.026" (format "~10,3F" 1.0256))
(expr-test "" "     1.002" (format "~10,3F" 1.002))
(expr-test "" "     1.002" (format "~10,3F" 1.0025))
(expr-test "" "     1.003" (format "~10,3F" 1.00256))

(test-section "from mailing list 2005-06-07")
(expr-test "" "1.000012"   (format "~8,6F" 1.00001234))

(test-section "from mailing list 2005-07-02")
(expr-test "" "abc\ndef\nghi\n" (format "abc~%~&def~&ghi~%"))
(expr-test "" "\ndef\nghi\n" (format "~&def~&ghi~%"))

(test-section "from mailing list 2017-10-11")
(expr-test "" "   1.00"    (format "~7,2F" .997554209949891))
(expr-test "" "   1.00"    (format "~7,2F" .99755))
(expr-test "" "   1.00"    (format "~7,2F" .9975))
(expr-test "" "   1.00"    (format "~7,2F" .997))
(expr-test "" "   0.99"    (format "~7,2F" .99))

(test-section "from mailing list 2017-10-13")
(expr-test "" "  18.00"    (format "~7,2F" 18.0000000000008))
(expr-test "" "    -15."   (format "~8,0F" -14.99995999999362))

(test-end)

